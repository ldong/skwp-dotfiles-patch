" My default font
" set guifont=Menlo:h15

" clear splash screen
" set shortmess=filnxtToO

" spell check
set spell
set spelllang=en_us

" Output ErrorMsg
set report=0

" config backup directory
set backup
set backupdir=~/.vim/backups
set backupskip=~/.vim/backups/*
set directory=~/.vims/backups
set writebackup

" config swap file
set swapfile
set dir=~/.vim/backups

filetype plugin on
filetype indent on

" update vim on the fly
nmap <leader>v :tabedit $MYVIMRC<CR>
nmap <leader>V :tabedit $MYVIMRC<CR>

autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。

" no ex mode
nnoremap Q <nop>

" remap vim
command! WQ wq
command! Wq wq
command! W w
command! Q q
command! Q1 q!
" Q map to q, to quit vim
command! -bar -bang Q quit<bang>

nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>

" cancel highlight search
noremap <silent><leader>/ :nohls<CR>

vnoremap < <gv
vnoremap > >gv

" resize
nnoremap <leader><left> :vertical resize -5<cr>
nnoremap <leader><down> :resize +5<cr>
nnoremap <leader><up> :resize -5<cr>
nnoremap <leader><right> :vertical resize +5<cr>

" Make <leader>' switch between ' and "
nnoremap <leader>' ""yls<c-r>={'"': "'", "'": '"'}[@"]<cr><esc>

" map <silent> <leader>y :<C-u>silent '<,'>w !pbcopy<CR>

" avoid and recover from accidental Ctrl-U
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>
inoremap <silent> <C-W> <C-\><C-O>db
inoremap <silent> <C-U> <C-\><C-O>d0
inoremap <silent> <C-Y> <C-R>"

" vertical diff
set diffopt+=vertical

" ==============================================================================
"                                   Mappings
" ==============================================================================
" Use single quote as additional range key
noremap ' `

" Rerun previous :command
noremap \' @:

" Underline a line with hyphens (<h2> in Markdown documents)
noremap \- yypVr-

" Underline a line with equals (<h1> in Markdown documents)
noremap \= yypVr=

" Remove white space turds from the ends of lines
noremap \W :FixWhitespace<cr>

" Delete ALL THE BUFFERS!
noremap \bd :1,999bd<cr>:NERDTree<cr>:NERDTree<cr>

" cd current window to parent directory of file
noremap \cd :lcd %:h<cr>:pwd<cr>

" Edit or view files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" Copy path of current file to clipboard
noremap \cf :let @+ = expand("%")<cr>

" Copy full path of current file to clipboard
noremap \cp :let @+ = expand("%:p")<cr>

" Generate ctags and cscope
" "ctags -R
" "cscope -Rbq
noremap \ct :!ctags -R .<cr><cr>

" Sort selection
noremap \s :sort<cr>

" selec the whole line
noremap \v ^v$

" selec the whole line without leading space
noremap \vv 0v$

" Put contents of parentheses on their own newline and reindent (must position
" cursor inside parentheses in normal mode first).
nmap \( ci(<cr><esc>Pa<cr><esc>Vkk=

" Break a comma-delimited list onto new lines
vmap \, :s/,/,\r/g<cr>)

" copy filename and filepath
nmap <leader>cn :let @*=expand("%")<CR>
nmap <leader>cp :let @*=expand("%:p")<CR>

" Error List
noremap <leader>ln :lnext<cr>
noremap <leader>lp :lprev<cr>

" redent
map <leader>= :delmarks z<CR>mzgg=G`zmzk<CR>

" reverse lines
" :g/^/m0
" :100,150g/^/m99
" :%!tac
" :100,150!tac

" Reverse selection
" \rh: mirror image the lines (reverse horizontally)
vnoremap ;rh c<C-O>:set revins<CR><C-R>"<Esc>:set norevins<CR>
" \rv: reverse the order of lines (reverse vertically)
nmap ;rv :set lz<CR>o<Esc>mz'aO<Esc>ma:'a+1,'z-1g/^/m 'a<CR>'addma'zdd:set nolz<CR>

" replace current word select
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/

" pretty print json
nnoremap <leader>J :%!python -m json.tool<CR>

" tidy html
nnoremap <leader>T :%!tidy -qicbn -asxhtml<CR>

" set highlight color after 80 regardless of the version of VIM
if exists('+colorcolumn')
    " let &colorcolumn="80,".join(range(120,999),",")
    let &colorcolumn="80"
    highlight ColorColumn ctermbg=9 guibg=#df0000
else
    " fallback for Vim < v7.3
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" ==============================================================================
"                                   Version Check
" ==============================================================================
if v:version < 704
  echo "Vim version is less than 7.4, do something about it, maybe?"
  finish
endif

" ==============================================================================
"                             NeoComplete
" ==============================================================================
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
"<CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "") ."\<CR>"
  "For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
"<TAB>: completion.
inoremap <expr><TAB>  pumvisible() ?"\<C-n>" :
      \ <SID>check_back_space() ?"\<TAB>" :
      \ neocomplete#start_manual_complete()
function! s:check_back_space()"{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}
inoremap <expr><Down> pumvisible() ?"\<C-n>" : "\<Down>"
inoremap <expr><Up> pumvisible() ?"\<C-p>" : "\<Up>"
"<C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ?"\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

"Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ?"\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php ='[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c ='[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp ='[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


" ==============================================================================
"                             Plugins Configuration
" ==============================================================================
" ,nt to open nerdTree
let NERDTreeIgnore=['\~$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
" let g:NERDTreeWinPos = "left"
" <leader><leader>r  rename
nmap <silent> <leader>nt :NERDTreeToggle<CR>
" open a NERDTree automatically when vim starts up if no files were specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | wincmd p | endif

autocmd FileType javascript setlocal omnifunc=tern#Complete


" ,tb to open tagbar
nmap <silent> <leader>tb :TagbarToggle<CR>
" Ctags, check the parent directories for tags, too.
set tags=./.tags;,./tags
let g:easytags_dynamic_files = 1
let g:easytags_file = '~/.vim/tags'
let g:easytags_updatetime_min=12000
let g:easytags_async = 1

" ctags
let g:tagbar_type_javascript = {
    \ 'ctagsbin' : '/usr/local/bin/jsctags'
\ }

" redfine emmet shortcut: ,e,
let g:user_emmet_install_global = 1
let g:user_emmet_leader_key     = '<leader>e'
" let g:user_emmet_install_global = 0
" autocmd FileType html,css,eruby,markdown,handlebars,hbs,php EmmetInstall

" Gundo toggle
nnoremap <leader>h :GundoToggle<CR>

" fix whitespace
command! F FixWhitespace

" enable always save with eol at the end of file
let b:PreserveNoEOL = 1

" eregex regex
let g:eregex_default_enable = 0
nnoremap <leader>r :call eregex#toggle()<CR>


" Tabularize
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Unite
" <C-x> <C-v> open file in horizontal and vertical split
" <C-t> open file in new tab
" <esc> exit unite window
" <C-j> <C-k> Navigation, keep hands on home row
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-p> :Unite file_rec/async<cr>
nnoremap <Leader>b :Unite buffer<cr>
nnoremap <space>/ :Unite grep:.<cr>
let g:unite_source_history_yank_enable = 1
nnoremap <space>y :Unite history/yank<cr>
nnoremap <space>s :Unite -quick-match buffer<cr>

let g:SuperTabCrMapping = 0
let g:unite_enable_start_insert = 1
let g:unite_split_rule = "botright"
let g:unite_force_overwrite_statusline = 0
let g:unite_winheight = 5
"call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
"      \ 'ignore_pattern', join([
"      \ '\.git/',
"      \ ], '\|'))
"call unite#filters#matcher_default#use(['matcher_fuzzy'])
"call unite#filters#sorter_default#use(['sorter_rank'])
nnoremap <C-P> :<C-u>Unite -buffer-name=files -start-insert buffer file_rec/async:!<cr>
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  let b:SuperTabDisabled = 1
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  imap <silent><buffer><expr> <C-x> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction


" Appropriately close the buffer without closing the window
cnoremap <expr> bd (getcmdtype() == ':' ? 'Bclose' : 'bd')

" disable polyglot for javascript
let g:polyglot_disabled = ['javascript']

" => Syntastic
" Update Error List, enable lnext, lprev to go back and forth
let g:syntastic_always_populate_loc_list = 1
" :SyntasticInfo
let g:syntastic_java_javac_config_file_enabled = 1
" let g:syntastic_python_checkers = ['pylint', 'flake8', 'python']
let g:syntastic_python_checkers = ['pylint', 'python']
let g:syntastic_python_pylint_args='--ignore=E501'
" let g:syntastic_python_pylint_args='--ignore=W0511,C0321'
let g:syntastic_html_tidy_ignore_errors = [ '<template> is not recognized!' ]
" general
"let g:syntastic_check_on_open = 1
"let g:syntastic_quiet_warnings = 0
"let g:syntastic_enable_signs = 1
"let g:syntastic_enable_highlighting = 0
"let g:syntastic_python_checker_args='--ignore=E501,E302,E231,E261,E201,W402,W293'

" highlight python
" let python_highlight_all = 1

" javascript style guide lint checker
" let g:syntastic_javascript_checkers = ['jsxhint']
" let g:syntastic_javascript_checkers = ['jsxhint', 'jscs']
" let g:syntastic_scss_checkers = ['scss_lint']

let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_checkers = []
let g:syntastic_scss_checkers = []


" Appropriately close the buffer without closing the window
cnoremap <expr> bd (getcmdtype() == ':' ? 'Bclose' : 'bd')

" Java Abbreviation
abbr psvm public static void main(String[] args){<CR>}<esc>O
abbr sysout System.out.println("");<esc>2hi
abbr syserr System.err.println("");<esc>2hi
abbr fori for (int i = 0; i < ; i++) {<esc>7hi
abbr tryb try {<CR>} catch (Exception ex) {<CR> ex.printStackTrace();<CR>}<esc>hx3ko
abbr ctm System.currentTimeMillis()

" insert date in the following format
iab <expr> dd strftime("%a %b %_d %H:%M:%S %Z %Y")
